package flux.lastbus.com.easysobuy.database.module;

import flux.lastbus.com.easysobuy.database.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import flux.lastbus.com.easysobuy.database.dao.UserInfoDBDao;
import flux.lastbus.com.easysobuy.database.dao.UsersDBDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "USERS_DB".
 */
public class UsersDB implements java.io.Serializable {

    /** Not-null value. */
    private String key;
    /** Not-null value. */
    private String userName;
    private String uid;
    private java.util.Date lastTime;
    private String member_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UsersDBDao myDao;

    private UserInfoDB info;
    private String info__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public UsersDB() {
    }

    public UsersDB(String uid) {
        this.uid = uid;
    }

    public UsersDB(String key, String userName, String uid, java.util.Date lastTime, String member_id) {
        this.key = key;
        this.userName = userName;
        this.uid = uid;
        this.lastTime = lastTime;
        this.member_id = member_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUsersDBDao() : null;
    }

    /** Not-null value. */
    public String getKey() {
        return key;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setKey(String key) {
        this.key = key;
    }

    /** Not-null value. */
    public String getUserName() {
        return userName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    public java.util.Date getLastTime() {
        return lastTime;
    }

    public void setLastTime(java.util.Date lastTime) {
        this.lastTime = lastTime;
    }

    public String getMember_id() {
        return member_id;
    }

    public void setMember_id(String member_id) {
        this.member_id = member_id;
    }

    /** To-one relationship, resolved on first access. */
    public UserInfoDB getInfo() {
        String __key = this.member_id;
        if (info__resolvedKey == null || info__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserInfoDBDao targetDao = daoSession.getUserInfoDBDao();
            UserInfoDB infoNew = targetDao.load(__key);
            synchronized (this) {
                info = infoNew;
            	info__resolvedKey = __key;
            }
        }
        return info;
    }

    public void setInfo(UserInfoDB info) {
        synchronized (this) {
            this.info = info;
            member_id = info == null ? null : info.getMember_id();
            info__resolvedKey = member_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}

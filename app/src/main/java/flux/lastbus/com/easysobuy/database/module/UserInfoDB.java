package flux.lastbus.com.easysobuy.database.module;

import flux.lastbus.com.easysobuy.database.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import flux.lastbus.com.easysobuy.database.dao.UserInfoDBDao;
import flux.lastbus.com.easysobuy.database.dao.UsersDBDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "USER_INFO_DB".
 */
public class UserInfoDB implements java.io.Serializable {

    private String member_id;
    private String member_name;
    private String member_avatar;
    private String store_name;
    private String grade_id;
    private String store_id;
    private String seller_name;
    private String uid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserInfoDBDao myDao;

    private UsersDB usersDB;
    private String usersDB__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public UserInfoDB() {
    }

    public UserInfoDB(String member_id) {
        this.member_id = member_id;
    }

    public UserInfoDB(String member_id, String member_name, String member_avatar, String store_name, String grade_id, String store_id, String seller_name, String uid) {
        this.member_id = member_id;
        this.member_name = member_name;
        this.member_avatar = member_avatar;
        this.store_name = store_name;
        this.grade_id = grade_id;
        this.store_id = store_id;
        this.seller_name = seller_name;
        this.uid = uid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserInfoDBDao() : null;
    }

    public String getMember_id() {
        return member_id;
    }

    public void setMember_id(String member_id) {
        this.member_id = member_id;
    }

    public String getMember_name() {
        return member_name;
    }

    public void setMember_name(String member_name) {
        this.member_name = member_name;
    }

    public String getMember_avatar() {
        return member_avatar;
    }

    public void setMember_avatar(String member_avatar) {
        this.member_avatar = member_avatar;
    }

    public String getStore_name() {
        return store_name;
    }

    public void setStore_name(String store_name) {
        this.store_name = store_name;
    }

    public String getGrade_id() {
        return grade_id;
    }

    public void setGrade_id(String grade_id) {
        this.grade_id = grade_id;
    }

    public String getStore_id() {
        return store_id;
    }

    public void setStore_id(String store_id) {
        this.store_id = store_id;
    }

    public String getSeller_name() {
        return seller_name;
    }

    public void setSeller_name(String seller_name) {
        this.seller_name = seller_name;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    /** To-one relationship, resolved on first access. */
    public UsersDB getUsersDB() {
        String __key = this.uid;
        if (usersDB__resolvedKey == null || usersDB__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UsersDBDao targetDao = daoSession.getUsersDBDao();
            UsersDB usersDBNew = targetDao.load(__key);
            synchronized (this) {
                usersDB = usersDBNew;
            	usersDB__resolvedKey = __key;
            }
        }
        return usersDB;
    }

    public void setUsersDB(UsersDB usersDB) {
        synchronized (this) {
            this.usersDB = usersDB;
            uid = usersDB == null ? null : usersDB.getUid();
            usersDB__resolvedKey = uid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
